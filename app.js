// ========== Supabase Setup ==========
const SUPABASE_URL = 'https://blesvyrzrlrxomlsxcen.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsZXN2eXJ6cmxyeG9tbHN4Y2VuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwMzIwMTgsImV4cCI6MjA2MzYwODAxOH0.L23OpiYpOfkFUro8423-OoUN_A8_iub218JfPLu-0Og'; // Replace here!
const client = supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

// ========== Firebase Push Setup ==========
const firebaseConfig = {
  apiKey: "AIzaSyAj24jmWPwDn4AFJC4UQAQqQ806PDs7z4Y",
  authDomain: "lightstate-c114a.firebaseapp.com",
  projectId: "lightstate-c114a",
  messagingSenderId: "834487997149",
  appId: "1:834487997149:web:8eb6d65007bc5d92da4134"
};
firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();

let swRegistration = null;
let readyForPush = false;

// ========== Register Service Worker before requesting token ==========
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('service-worker.js', { scope: './' })
    .then((registration) => {
      swRegistration = registration;
      return navigator.serviceWorker.ready;
    })
    .then(() => {
      readyForPush = true;
      console.log('Service Worker ready and controlling the page!');
    });
}

// ========== Function to register push token ==========
async function registerPushToken() {
  if (!readyForPush) {
    alert('The Service Worker is not controlling the page yet. Try again in a few seconds or reload.');
    return;
  }
  try {
    const permission = await Notification.requestPermission();
    if (permission !== 'granted') {
      alert('Please allow notifications to receive alerts!');
      return;
    }
    const token = await messaging.getToken({
      vapidKey: 'BKxX_tmr2-2BjlHheRqyIAtEwOHiKqiIUayI3bkvJPTNZnqadb6O-Stz8SWt-06coLJrh9jzX3-z9nntUHuqrfI',
      serviceWorkerRegistration: swRegistration
    });
    console.log('Token generated by FCM:', token);

    if (!token) throw new Error('Empty token');

    // Save only the token (you can use UNIQUE in the table to avoid duplicates)
    const { error } = await client.from('push_tokens').insert([{ token }]);
    if (error && !/duplicate/i.test(error.message)) {
      alert('Error registering token: ' + error.message);
      return;
    }
    alert('Notifications enabled! You will receive alerts about new sales.');
  } catch (err) {
    alert('Error enabling notifications: ' + (err.message || err));
  }
}

window.registerPushToken = registerPushToken;

// Handles messages received in the foreground (app open)
messaging.onMessage((payload) => {
  // Don't show notifications here!
  console.log('[Foreground FCM] Message received:', payload);
  // Here you can update the UI, badge, etc.
});

// ========== Fetch all developments ==========
async function fetchDevelopments() {
  const { data, error } = await client
    .from('empreendimentos')
    .select('*')
    .order('id', { ascending: true });
  if (error) {
    alert('Error loading developments: ' + error.message);
    return [];
  }
  return data || [];
}

// ========== Fetch sales by development ==========
async function fetchSales(developmentId) {
  const { data, error } = await client
    .from('vendas')
    .select('*')
    .eq('empreendimento_id', developmentId);
  if (error) {
    alert('Error fetching sales: ' + error.message);
    return [];
  }
  return data || [];
}

// ========== Render tabs for developments ==========
function renderTabs(developments, onTabClick) {
  const tabs = document.getElementById('empreendimentos-tabs');
  tabs.innerHTML = '';
  developments.forEach((dev, idx) => {
    const tab = document.createElement('button');
    tab.className = 'tab-btn';
    tab.textContent = dev.nome;
    tab.onclick = () => onTabClick(dev, idx);
    tabs.appendChild(tab);
  });
}

// ========== Render the building grid ==========
async function renderBuilding(dev, tabIdx = 0) {
  const container = document.getElementById('predio-view');
  container.innerHTML = '';
  if (!dev || !dev.config) return;

  let config = dev.config;
  if (typeof config === 'string') {
    try { config = JSON.parse(config); }
    catch { alert("Invalid development configuration"); return; }
  }
  const { total, perFloor, base, increment } = config;
  const sales = await fetchSales(dev.id);
  const soldSet = new Set(sales.map(v => Number(v.numero_apartamento)));

  const isMobile = window.innerWidth <= 400;
  const gridGap = isMobile ? 1 : 4;

  const totalFloors = Math.ceil(total / perFloor);
  const grid = document.createElement('div');
  grid.className = 'building-grid';
  grid.style.gridTemplateColumns = `repeat(${perFloor}, 1fr)`;
  grid.style.gap = gridGap + "px";
  grid.style.width = "100%";
  grid.style.boxSizing = "border-box";

  // Create apartments
  const rows = [];
  for (let floor = 0; floor < totalFloors; floor++) {
    const row = [];
    for (let apt = 0; apt < perFloor; apt++) {
      const i = floor * perFloor + apt;
      if (i >= total) continue;
      const aptNumber = base + floor * increment + apt;

      const aptDiv = document.createElement('div');
      aptDiv.className = 'apt';
      // Don't set width/height here!
      aptDiv.textContent = aptNumber;
      if (soldSet.has(aptNumber)) {
        aptDiv.classList.add('sold');
        aptDiv.title = `Sold (Apt ${aptNumber}, Floor ${floor + 1})`;
      } else {
        aptDiv.title = `Available (Apt ${aptNumber}, Floor ${floor + 1})`;
      }
      row.push(aptDiv);
    }
    rows.push(row);
  }
  for (let i = rows.length - 1; i >= 0; i--) {
    rows[i].forEach(div => grid.appendChild(div));
  }
  container.appendChild(grid);

  // Update active tab
  document.querySelectorAll('.tab-btn').forEach((tab, i) =>
    tab.classList.toggle('active', i === tabIdx)
  );
}

// ========== Initialize App ==========
document.addEventListener('DOMContentLoaded', async () => {
  const developments = await fetchDevelopments();
  window.__developments = developments;

  if (!developments.length) {
    document.getElementById('predio-view').innerHTML = "<p>No developments found.</p>";
    return;
  }
  renderTabs(developments, (dev, idx) => renderBuilding(dev, idx));
  // Activate the first tab on load
  setTimeout(() => {
    document.querySelector('.tab-btn')?.click();
  }, 10);
});

// ========== Responsiveness on resize ==========
window.addEventListener('resize', () => {
  const activeIdx = Array.from(document.querySelectorAll('.tab-btn')).findIndex(tab => tab.classList.contains('active'));
  if (window.__developments && activeIdx >= 0) {
    renderBuilding(window.__developments[activeIdx], activeIdx);
  }
});
